name: CI/CD

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: mspr_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mspr_db" >> $GITHUB_ENV
      - name: Init test database
        run: |
          psql -h localhost -U postgres -d mspr_db -c "CREATE TABLE IF NOT EXISTS covid19_daily (id SERIAL PRIMARY KEY, total_cases INT, total_deaths INT, total_recovered INT);"
        env:
          PGPASSWORD: postgres
      - name: Insert test data
        run: |
          psql -h localhost -U postgres -d mspr_db -c "
            INSERT INTO covid19_daily (total_cases, total_deaths, total_recovered) VALUES
            (100, 0, 80), (200, 1, 150), (300, 2, 250),
            (400, 1, 200), (500, 2, 300), (600, 3, 400),
            (15000, 3, 12000), (20000, 4, 18000), (25000, 5, 22000),
            (30000, 6, 25000), (35000, 7, 26000), (40000, 8, 27000);
          "
        env:
          PGPASSWORD: postgres
      - name: Start dashboard (optionnel)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          nohup streamlit run scripts/dashboard.py --server.port 8501 &
        shell: bash
      - name: Run unit tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: pytest -q tests/
      # --- Build & Push Docker Hub ---
      - name: Set image prefix
        run: echo "IMAGE_PREFIX=123manal/mspr6.1" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: 123manal
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push api
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: |
            123manal/mspr6.1-api:latest
            123manal/mspr6.1-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push ml-pipeline
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.ml_pipeline
          push: true
          tags: |
            123manal/mspr6.1-ml-pipeline:latest
            123manal/mspr6.1-ml-pipeline:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push dashboard
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.dashboard
          push: true
          tags: |
            123manal/mspr6.1-dashboard:latest
            123manal/mspr6.1-dashboard:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Debug workspace files
        run: |
          echo "Contenu du dossier cleaned_data :"
          ls -l cleaned_data || echo "cleaned_data absent"
          echo "Contenu du workspace :"
          ls -l